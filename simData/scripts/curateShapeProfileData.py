import numpy as np
import os
import simData.eagleSims as eagle
import simData.haloShapes as shapes
import sys
import glob
import re
import h5py

''' This script takes the .npz files generated by the generateShapeProfiles.py script
and turns them into a single hdf5 file '''

model = sys.argv[1] # e.g. "CDMb", "vdSIDMb", etc.
output_base = './shapeProfiles'
output_dir = os.path.join(output_base, model)
output_filename = os.path.join(output_dir, model+'_axisymmetric_shape_profiles.hdf5')

# Get list of matching files
files = sorted(glob.glob(os.path.join(output_dir, model+'_*.npz')))
if not files:
    raise FileNotFoundError("No matching files found.")
# Extract GrNm values from filenames
GrNm = np.array([int(re.search(model+r'_(\d+)\.npz', os.path.basename(f)).group(1)) for f in files])

# Load all npz files
data_list = [np.load(f) for f in files]
keys = data_list[0].files

metadata = {
    'M200':       {'units': 'Msun',             'description': 'Virial mass'},
    'r200':       {'units': 'Mpc',              'description': 'Virial radius (physical, not co-moving)'},
    'L':          {'units': 'kpc km s^-1 / h',  'description': 'Specific angular momentum vector of stars (used to set z-axis)'},
    'pos':        {'units': 'Mpc / h',          'description': 'Position of the halo (co-moving)'},
    'reff':       {'units': 'Mpc',              'description': 'Effective radii at which shapes are measured (physical, not co-moving)'},
    'shellFac':   {'units': 'dimensionless',    'description': 'Shell spacing factor. The ratio of inner radius to outer radius of the ellipsoidal shell used to evaluate the shapes is shellFac^2'},
    'dm_Q':       {'units': 'dimensionless',    'description': 'DM axis ratio as a function of reff'},
    'dm_N':       {'units': 'number',           'description': 'Number of DM particles in the ellipsoidal shell used to calculate dm_Q'},
    'star_Q':     {'units': 'dimensionless',    'description': 'Star axis ratio as a function of reff'},
    'star_N':     {'units': 'number',           'description': 'Number of star particles in the ellipsoidal shell used to calculate star_Q'},
    'gas_Q':      {'units': 'dimensionless',    'description': 'Gas axis ratio as a function of reff'},
    'gas_N':      {'units': 'number',           'description': 'Number of gas particles in the ellipsoidal shell used to calculate gas_Q'},
    'dm_Q_error': {'units': 'dimensionless',    'description': 'Error on dm_Q estimated from bootstrap resampling the DM particle distribution before evaluating the shapes'},
    'GrNm':       {'units': 'index',            'description': 'Group number of the friends-of-friends group. These start at 1.'},
}

# Create output HDF5 file
with h5py.File(output_filename, 'w') as h5f:
    ds = h5f.create_dataset('GrNm', data=GrNm)
    ds.attrs['units'] = metadata['GrNm'].get('units', '')
    ds.attrs['description'] = metadata['GrNm'].get('description', '')

    for key in keys:
        if key == 'rmax':
            dataset_name = 'reff'   # rmax made sense when using enclosed particles rather than the shell
        else:
            dataset_name = key
        data = np.stack([d[key] for d in data_list])
        ds = h5f.create_dataset(dataset_name, data=data)
        if dataset_name in metadata:
            ds.attrs['units'] = metadata[dataset_name].get('units', '')
            ds.attrs['description'] = metadata[dataset_name].get('description', '')