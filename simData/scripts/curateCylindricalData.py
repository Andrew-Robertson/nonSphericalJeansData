import numpy as np
import os
import simData.eagleSims as eagle
import simData.haloShapes as shapes
import sys
import glob
import re
import h5py

''' This script takes the .npz files generated by the generateCylindricalDensityAndPotentialData.py script
and turns them into a single hdf5 file '''

model = sys.argv[1] # e.g. "CDMb", "vdSIDMb", etc.
output_base = './cylindricalData'
output_dir = os.path.join(output_base, model)
output_filename = os.path.join(output_dir, model+'_cylindrical_density_and_potential.hdf5')

# Get list of matching files
files = sorted(glob.glob(os.path.join(output_dir, model+'_*.npz')))
if not files:
    raise FileNotFoundError("No matching files found.")
# Extract GrNm values from filenames
GrNm = np.array([int(re.search(model+r'_(\d+)\.npz', os.path.basename(f)).group(1)) for f in files])

# Load all npz files
data_list = [np.load(f) for f in files]
keys = data_list[0].files

metadata = {
    'M200':                       {'units': 'Msun',             'description': 'Virial mass'},
    'r200':                       {'units': 'Mpc',              'description': 'Virial radius (physical, not co-moving)'},
    'L':                          {'units': 'kpc km s^-1 / h',  'description': 'Specific angular momentum vector of stars (used to set z-axis)'},
    'pos':                        {'units': 'Mpc / h',          'description': 'Position of the halo (co-moving)'},
    'Redges':                     {'units': 'Mpc',              'description': 'Radial bin edges for cylindrical profiles (physical, not co-moving)'},
    'Zedges':                     {'units': 'Mpc',              'description': 'Z-axis bin edges for cylindrical profiles (physical, not co-moving)'},
    'dm_rho':                     {'units': 'Msun / Mpc^3',     'description': 'Azimuthally-averaged density of dark matter, in bins specified by Redges and Zedges'},
    'star_rho':                   {'units': 'Msun / Mpc^3',     'description': 'Azimuthally-averaged density of stars, in bins specified by Redges and Zedges'},
    'gas_rho':                    {'units': 'Msun / Mpc^3',     'description': 'Azimuthally-averaged density of gas, in bins specified by Redges and Zedges'},
    'bh_rho':                     {'units': 'Msun / Mpc^3',     'description': 'Azimuthally-averaged density of black holes, in bins specified by Redges and Zedges'},
    'dm_potential_sphere':        {'units': 'km^2 / s^2',       'description': 'Spherically averaged gravitational potential from dark matter, taking into account all dark matter within a 100kpc radius sphere'},
    'star_potential_sphere':      {'units': 'km^2 / s^2',       'description': 'Spherically averaged gravitational potential from stars, taking into account all stars within a 100kpc radius sphere'},
    'gas_potential_sphere':       {'units': 'km^2 / s^2',       'description': 'Spherically averaged gravitational potential from gas, taking into account all gas within a 100kpc radius sphere'},
    'bh_potential_sphere':        {'units': 'km^2 / s^2',       'description': 'Spherically averaged gravitational potential from black holes, taking into account all black holes within a 100kpc radius sphere'},
    'baryon_potential_sphere':    {'units': 'km^2 / s^2',       'description': 'Spherically averaged gravitational potential from all baryons (stars + gas + black holes), taking into account all baryons within a 100kpc radius sphere'},
    'total_potential_sphere':     {'units': 'km^2 / s^2',       'description': 'Spherically averaged gravitational potential from all matter (dark matter + baryons), taking into account all matter within a 100kpc radius sphere'},
    'smooth_dm_rho':              {'units': 'Msun / Mpc^3',     'description': "Azimuthally-averaged density of dark matter, in bins specified by Redges and Zedges. The mass of each particle is distributed following a 3D Gaussian kernel, with the Gaussian standard deviation being the distance to the 32nd nearest neighbour"},
    'GrNm':                       {'units': 'index',            'description': 'Group number of the friends-of-friends group. These start at 1.'},
}

# Create output HDF5 file
with h5py.File(output_filename, 'w') as h5f:
    ds = h5f.create_dataset('GrNm', data=GrNm)
    ds.attrs['units'] = metadata['GrNm'].get('units', '')
    ds.attrs['description'] = metadata['GrNm'].get('description', '')

    for key in keys:
        if key == 'rmax':
            dataset_name = 'reff'   # rmax made sense when using enclosed particles rather than the shell
        else:
            dataset_name = key
        data = np.stack([d[key] for d in data_list])
        if 'potential' in key:
            data *= -1 # potentials were saved without a minus sign
        ds = h5f.create_dataset(dataset_name, data=data)
        if dataset_name in metadata:
            ds.attrs['units'] = metadata[dataset_name].get('units', '')
            ds.attrs['description'] = metadata[dataset_name].get('description', '')