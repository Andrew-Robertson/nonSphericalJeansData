import numpy as np
import os
import simData.eagleSims as eagle
import simData.haloShapes as shapes
import sys
import glob
import re
import h5py

''' This script takes the .npz files generated by the generateShapeProfiles.py script
and turns them into a single hdf5 file '''

model = sys.argv[1] # e.g. "CDMb", "vdSIDMb", etc.
output_base = './densityProfiles'
output_dir = os.path.join(output_base, model)
output_filename = os.path.join(output_dir, model+'_sphericallyAveraged_density_profiles.hdf5')

# Get list of matching files
files = sorted(glob.glob(os.path.join(output_dir, model+'_*.npz')))
if not files:
    raise FileNotFoundError("No matching files found.")
# Extract GrNm values from filenames
GrNm = np.array([int(re.search(model+r'_(\d+)\.npz', os.path.basename(f)).group(1)) for f in files])

# Load all npz files
data_list = [np.load(f) for f in files]
keys = data_list[0].files

metadata = {
    'M200':       {'units': 'Msun',             'description': 'Virial mass'},
    'r200':       {'units': 'Mpc',              'description': 'Virial radius (physical, not co-moving)'},
    'pos':        {'units': 'Mpc / h',          'description': 'Position of the halo (co-moving)'},
    'rs':         {'units': 'Mpc',              'description': 'Radii at which densities are measured (physical, not co-moving)'},
    'redges':     {'units': 'Mpc',              'description': 'Radii at which enclosed masses are measured (physical, not co-moving)'},
    'dm_rho':     {'units': 'Msun Mpc^-3',      'description': 'DM density as a function of radius (rs)'},
    'dm_M':       {'units': 'Msun',             'description': 'DM enclosed mass as a function of radius (redges)'},
    'dm_M_r200':  {'units': 'Msun',             'description': 'DM enclosed mass within r200'},
    'star_rho':   {'units': 'Msun Mpc^-3',      'description': 'stellar density as a function of radius (rs)'},
    'star_M':     {'units': 'Msun',             'description': 'stellar enclosed mass as a function of radius (redges)'},
    'star_M_r200':{'units': 'Msun',             'description': 'stellar enclosed mass within r200'},
    'gas_rho':    {'units': 'Msun Mpc^-3',      'description': 'gas density as a function of radius (rs)'},
    'gas_M':      {'units': 'Msun',             'description': 'gas enclosed mass as a function of radius (redges)'},
    'gas_M_r200': {'units': 'Msun',             'description': 'gas enclosed mass within r200'},
    'GrNm':       {'units': 'index',            'description': 'Group number of the friends-of-friends group. These start at 1.'},
}

# Create output HDF5 file
with h5py.File(output_filename, 'w') as h5f:
    ds = h5f.create_dataset('GrNm', data=GrNm)
    ds.attrs['units'] = metadata['GrNm'].get('units', '')
    ds.attrs['description'] = metadata['GrNm'].get('description', '')

    for key in keys:
        dataset_name = key
        data = np.stack([d[key] for d in data_list])
        ds = h5f.create_dataset(dataset_name, data=data)
        if dataset_name in metadata:
            ds.attrs['units'] = metadata[dataset_name].get('units', '')
            ds.attrs['description'] = metadata[dataset_name].get('description', '')